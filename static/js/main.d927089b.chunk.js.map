{"version":3,"sources":["components/choosePlayer.js","components/Status.js","App.js","serviceWorker.js","index.js"],"names":["Player","e","preventDefault","this","props","player","target","value","onSubmit","handleForm","type","name","Component","Status","setPlayer","winner","handleSetPlayer","renderHtml","App","state","board","Array","fill","checkMatch","winLines","index","length","a","b","c","setState","newBoard","newPlayer","checkWinner","map","box","className","key","onClick","handleClick","renderBoxes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d927089b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Player extends Component {\r\n    handleForm(e)\r\n    {\r\n        e.preventDefault()\r\n        this.props.player(e.target.player.value)\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <form onSubmit={(e)=>this.handleForm(e)}>\r\n                <label>\r\n                    Player X\r\n                    <input type=\"radio\" name =\"player\" value=\"X\"></input>\r\n                </label>\r\n            \r\n                <label>\r\n                    Player O\r\n                    <input type=\"radio\" name =\"player\" value=\"O\"></input>\r\n                </label>\r\n                <input type=\"submit\" value=\"Start\" name=\"Start\" ></input>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Player\r\n","import React, { Component } from 'react'\r\nimport Player from './choosePlayer'\r\nclass Status extends Component {\r\n    handleSetPlayer(e){\r\n        this.props.setPlayer(e)\r\n    }\r\n    renderHtml()\r\n    {\r\n        if(this.props.winner){\r\n            return(<h2>Winner is {this.props.winner}</h2>)\r\n        }\r\n        else{\r\n           return( \r\n               this.props.player ?\r\n                    <h2>Next Player is{this.props.player}</h2>:\r\n                    <Player player={(e)=>this.handleSetPlayer(e)}></Player>\r\n           )}\r\n    }\r\n    render() {\r\n        return (<span>{this.renderHtml()}</span>)\r\n    }\r\n}\r\n\r\nexport default Status\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport Status from './components/Status'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      board: Array(9).fill(null),\n      player: null,\n      winner: null\n    }\n  }\n  /* *********end of constructor******/\n\n  checkWinner() {\n    let winLines = [\n      [\"0\", \"1\", \"2\"],\n      [\"3\", \"4\", \"5\"],\n      [\"6\", \"7\", \"8\"],\n      [\"0\", \"3\", \"6\"],\n      [\"1\", \"4\", \"7\"],\n      [\"2\", \"5\", \"8\"],\n      [\"0\", \"4\", \"8\"],\n      [\"2\", \"4\", \"6\"]\n    ]\n    this.checkMatch(winLines)\n  }\n\n  checkMatch(winLines){\n    for (let index = 0; index < winLines.length; index++) {\n      const [a, b, c] = winLines[index];\n      if (this.state.board[a] && (this.state.board[a] === this.state.board[b]) && \n      (this.state.board[a] === this.state.board[c]))\n      {\n         this.setState({\n           winner:this.state.player\n         })\n      }\n\n    }\n  }\n\n\n  handleClick(index) {\n    if(this.state.player && !this.state.winner)\n    {\n      let newBoard = this.state.board\n      if (this.state.board[index] === null )\n      {  \n        newBoard[index] = this.state.player\n        let newPlayer = this.state.player === \"X\" ? \"O\" : \"X\"\n       \n        this.setState({\n          board: newBoard,\n          player: newPlayer\n        })\n       \n        this.checkWinner()\n      }\n    }\n    \n\n  }\n  setPlayer(player)\n  {\n    this.setState({\n      player:player\n    })\n  }\n  renderBoxes()\n  {\n    return(\n    this.state.board.map((box, index) => <div className=\"box\"\n     key={index}\n    onClick={() => this.handleClick(index)}>\n    {box}\n    </div>)\n    )\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Tic Tac Toe App</h1>\n        <Status player={this.state.player} setPlayer={(e)=> {this.setPlayer(e)}} winner={this.state.winner}></Status>\n        <div className=\"board\">\n          {this.renderBoxes()}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}